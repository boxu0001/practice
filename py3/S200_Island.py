# Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

# Example 1:

# Input:
# 11110
# 11010
# 11000
# 00000

# Output: 1

# Example 2:

# Input:
# 11000
# 11000
# 00100
# 00011

# Output: 3

from __future__ import annotations
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if len(grid) == 0 or len(grid[0]) == 0:
            return 0
        row=len(grid)
        col=len(grid[0])
        count = 0
        for i in range(row):
            for j in range(col):
                if grid[i][j] != '1':
                    continue
                else:
                    count+=1
                    queue=[[i,j]]
                    grid[i][j] = 'C'
                    while queue:
                        ss, sj = queue.pop(0)
                        if ss+1<row and grid[ss + 1][sj] == '1':
                            queue += [[ss+1, sj]]
                            grid[ss+1][sj] = 'C'
                        if ss-1>=0 and grid[ss - 1][sj] == '1':
                            queue += [[ss-1, sj]]
                            grid[ss-1][sj] = 'C'
                        if sj+1 <col and grid[ss][sj+1] == '1':
                            queue += [[ss, sj+1]]
                            grid[ss][sj+1] = 'C'
                        if sj-1 >=0 and grid[ss][sj-1] == '1':
                            queue += [[ss, sj-1]]
                            grid[ss][sj-1] = 'C'
                    
        return count
                        

s=Solution()
# print(s.numIslands([list(i) for i in ['11000','11000','00100','00011']]))
# print(s.numIslands([list(i) for i in ['11110','11010','11000','00000']]))
print(s.numIslands([["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]))